// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package neo

import (
	"context"
	"github.com/johnnadratowski/golang-neo4j-bolt-driver"
	"sync"
)

var (
	lockServiceMockConn               sync.RWMutex
	lockServiceMockGetSubordinates    sync.RWMutex
	lockServiceMockMapResponseToUsers sync.RWMutex
	lockServiceMockSeed               sync.RWMutex
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//     func TestSomethingThatUsesService(t *testing.T) {
//
//         // make and configure a mocked Service
//         mockedService := &ServiceMock{
//             ConnFunc: func() golangNeo4jBoltDriver.Conn {
// 	               panic("mock out the Conn method")
//             },
//             GetSubordinatesFunc: func(ctx context.Context, userID string) ([]byte, error) {
// 	               panic("mock out the GetSubordinates method")
//             },
//             MapResponseToUsersFunc: func(data [][]interface{}) ([]byte, error) {
// 	               panic("mock out the MapResponseToUsers method")
//             },
//             SeedFunc: func(ctx context.Context) error {
// 	               panic("mock out the Seed method")
//             },
//         }
//
//         // use mockedService in code that requires Service
//         // and then make assertions.
//
//     }
type ServiceMock struct {
	// ConnFunc mocks the Conn method.
	ConnFunc func() golangNeo4jBoltDriver.Conn

	// GetSubordinatesFunc mocks the GetSubordinates method.
	GetSubordinatesFunc func(ctx context.Context, userID string) ([]byte, error)

	// MapResponseToUsersFunc mocks the MapResponseToUsers method.
	MapResponseToUsersFunc func(data [][]interface{}) ([]byte, error)

	// SeedFunc mocks the Seed method.
	SeedFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Conn holds details about calls to the Conn method.
		Conn []struct {
		}
		// GetSubordinates holds details about calls to the GetSubordinates method.
		GetSubordinates []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserID is the userID argument value.
			UserID string
		}
		// MapResponseToUsers holds details about calls to the MapResponseToUsers method.
		MapResponseToUsers []struct {
			// Data is the data argument value.
			Data [][]interface{}
		}
		// Seed holds details about calls to the Seed method.
		Seed []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// Conn calls ConnFunc.
func (mock *ServiceMock) Conn() golangNeo4jBoltDriver.Conn {
	if mock.ConnFunc == nil {
		panic("ServiceMock.ConnFunc: method is nil but Service.Conn was just called")
	}
	callInfo := struct {
	}{}
	lockServiceMockConn.Lock()
	mock.calls.Conn = append(mock.calls.Conn, callInfo)
	lockServiceMockConn.Unlock()
	return mock.ConnFunc()
}

// ConnCalls gets all the calls that were made to Conn.
// Check the length with:
//     len(mockedService.ConnCalls())
func (mock *ServiceMock) ConnCalls() []struct {
} {
	var calls []struct {
	}
	lockServiceMockConn.RLock()
	calls = mock.calls.Conn
	lockServiceMockConn.RUnlock()
	return calls
}

// GetSubordinates calls GetSubordinatesFunc.
func (mock *ServiceMock) GetSubordinates(ctx context.Context, userID string) ([]byte, error) {
	if mock.GetSubordinatesFunc == nil {
		panic("ServiceMock.GetSubordinatesFunc: method is nil but Service.GetSubordinates was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		UserID string
	}{
		Ctx:    ctx,
		UserID: userID,
	}
	lockServiceMockGetSubordinates.Lock()
	mock.calls.GetSubordinates = append(mock.calls.GetSubordinates, callInfo)
	lockServiceMockGetSubordinates.Unlock()
	return mock.GetSubordinatesFunc(ctx, userID)
}

// GetSubordinatesCalls gets all the calls that were made to GetSubordinates.
// Check the length with:
//     len(mockedService.GetSubordinatesCalls())
func (mock *ServiceMock) GetSubordinatesCalls() []struct {
	Ctx    context.Context
	UserID string
} {
	var calls []struct {
		Ctx    context.Context
		UserID string
	}
	lockServiceMockGetSubordinates.RLock()
	calls = mock.calls.GetSubordinates
	lockServiceMockGetSubordinates.RUnlock()
	return calls
}

// MapResponseToUsers calls MapResponseToUsersFunc.
func (mock *ServiceMock) MapResponseToUsers(data [][]interface{}) ([]byte, error) {
	if mock.MapResponseToUsersFunc == nil {
		panic("ServiceMock.MapResponseToUsersFunc: method is nil but Service.MapResponseToUsers was just called")
	}
	callInfo := struct {
		Data [][]interface{}
	}{
		Data: data,
	}
	lockServiceMockMapResponseToUsers.Lock()
	mock.calls.MapResponseToUsers = append(mock.calls.MapResponseToUsers, callInfo)
	lockServiceMockMapResponseToUsers.Unlock()
	return mock.MapResponseToUsersFunc(data)
}

// MapResponseToUsersCalls gets all the calls that were made to MapResponseToUsers.
// Check the length with:
//     len(mockedService.MapResponseToUsersCalls())
func (mock *ServiceMock) MapResponseToUsersCalls() []struct {
	Data [][]interface{}
} {
	var calls []struct {
		Data [][]interface{}
	}
	lockServiceMockMapResponseToUsers.RLock()
	calls = mock.calls.MapResponseToUsers
	lockServiceMockMapResponseToUsers.RUnlock()
	return calls
}

// Seed calls SeedFunc.
func (mock *ServiceMock) Seed(ctx context.Context) error {
	if mock.SeedFunc == nil {
		panic("ServiceMock.SeedFunc: method is nil but Service.Seed was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockServiceMockSeed.Lock()
	mock.calls.Seed = append(mock.calls.Seed, callInfo)
	lockServiceMockSeed.Unlock()
	return mock.SeedFunc(ctx)
}

// SeedCalls gets all the calls that were made to Seed.
// Check the length with:
//     len(mockedService.SeedCalls())
func (mock *ServiceMock) SeedCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockServiceMockSeed.RLock()
	calls = mock.calls.Seed
	lockServiceMockSeed.RUnlock()
	return calls
}
